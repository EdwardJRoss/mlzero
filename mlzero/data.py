# AUTOGENERATED! DO NOT EDIT! File to edit: 000_data.ipynb (unless otherwise specified).

__all__ = ['DATA_PATH', 'data_au_jobs', 'data_wine_reviews', 'data_wiki_movies', 'data_women_clothing_reviews',
           'data_au_election_2019_tweets', 'data_dickens_corpus', 'GUTENBERG_DICKENS']

# Cell
from pathlib import Path
import pickle
import pandas as pd
from kaggle.api.kaggle_api_extended import KaggleApi

import typing as T

DATA_PATH = (Path.home() / ".cache") / "mlzero"
DATA_PATH.mkdir(exist_ok=True, parents=True)

# Cell
def data_au_jobs(data_path: Path = DATA_PATH) -> pd.DataFrame:
    """Gets Australian Job Ads

    License: CC BY-NC-SA 4.0
    See https://github.com/EdwardJRoss/job-advert-analysis
    """
    # TODO: Fetch
    with open(data_path /'au_jobs.pkl', 'rb') as f:
        return pickle.load(f)

# Cell
def data_wine_reviews(data_path: Path = DATA_PATH) -> pd.DataFrame:
    """Retrieves Wine Reivews Data

    License: CC BY-NC-SA 4.0
    See https://www.kaggle.com/zynicide/wine-reviews
    """
    dest = data_path / 'winemag-data-130k-v2.csv.zip'
    if not dest.exists():
        kaggle = KaggleApi()
        kaggle.authenticate()
        kaggle.dataset_download_file('zynicide/wine-reviews', 'winemag-data-130k-v2.csv', path=data_path)
    return pd.read_csv(dest)

# Cell
def data_wiki_movies(data_path: Path = DATA_PATH) -> pd.DataFrame:
    """Movie Summaries from Wikipedia

    License: CC BY-SA 4.0
    See https://www.kaggle.com/jrobischon/wikipedia-movie-plots
    """
    dest = data_path / 'wiki_movie_plots_deduped.csv.zip'
    if not dest.exists():
        kaggle = KaggleApi()
        kaggle.authenticate()
        kaggle.dataset_download_file('jrobischon/wikipedia-movie-plots', 'wiki_movie_plots_deduped.csv', path=data_path)
    return pd.read_csv(dest)

# Cell
def data_women_clothing_reviews(data_path: Path = DATA_PATH) -> pd.DataFrame:
    """Women's E-commerce Clothing Reviews

    License: CC0
    https://www.kaggle.com/nicapotato/womens-ecommerce-clothing-reviews
    """
    dest = data_path / 'Womens%20Clothing%20E-Commerce%20Reviews.csv.zip'
    if not dest.exists():
        kaggle = KaggleApi()
        kaggle.authenticate()
        kaggle.dataset_download_file('nicapotato/womens-ecommerce-clothing-reviews', 'Womens Clothing E-Commerce Reviews.csv', path=data_path)
    return pd.read_csv(dest)

# Cell
def data_au_election_2019_tweets(data_path: Path = DATA_PATH) -> pd.DataFrame:
    """Tweets from the 2019 Australian Elections

    Collected from Twitter API keyword search betwen 2019-05-10 and 2019-05-20.

    License: CC0: Public Domain
    See https://www.kaggle.com/taniaj/australian-election-2019-tweets
    """
    dest = data_path / 'auspol2019.csv.zip'
    if not dest.exists():
        kaggle = KaggleApi()
        kaggle.authenticate()
        kaggle.dataset_download_file('taniaj/australian-election-2019-tweets', 'auspol2019.csv', path=data_path)
    return pd.read_csv(dest)

# Cell
from gutenberg.acquire import load_etext
from gutenberg.cleanup import strip_headers

# Cell
GUTENBERG_DICKENS = {
    98: 'A Tale of Two Cities',
    1400: 'Great Expectations',
    730: 'Oliver Twist',
    766: 'David Copperfield',
    19337: 'A Christmas Carol',
    786: 'Hard Times',
    1023: 'Bleak House',
    580: 'The Pickwick Papers',
    883: 'Out Mutual Friend',
    967: 'Nicholas Nickleby',
    700: 'The Old Curiosity Shop',
    821: 'Domeby and Son',
    963: 'Little Dorrit',
}

def data_dickens_corpus(data_path: Path = DATA_PATH, mirror:str="https://gutenberg.pglaf.org/") -> T.Dict[str, str]:
    """Download a corpus of Charles Dicken's most popular books

    data_path: Where to store the cache
    mirror   : Project Gutenberg mirror to use

    Returns a dictionary of {"title": "full text"}
    """
    dest = data_path / 'dickens.pkl'
    if not dest.exists():
        data = {title: strip_headers(load_etext(idx, mirror=mirror)).strip() for idx, title in GUTENBERG_DICKENS.items()}
        with open(dest, 'wb') as f:
            pickle.dump(data, f)
    with open(dest, 'rb') as f:
        data = pickle.load(f)
    return data